1. Control Flow Analysis and Optimization

---------------------------------------------------------------

control transfer == branch
control flow: branching behavior of an application
dynamic(execution) CF / static(compiler) CF

Basic Block: operations with equivalent execution conditions
When a BB starts
- first operation
- branch target
- immediately after branch

Control Flow Graph
- note that there are pseudo nodes (entry, exit)
Weighted CFG
- control flow profiling -> annotate CFG -> weighted CFG

Dominator
- each BB dominates itself
- if x domintates y, and y dominates z, then x dominates z
- if x dominates z and y dominates z, then either x dominates y or y dominates x
-> blocks that are guaranteed to have execute PRIOR to this block + ITSELF

Dominator Analysis: top-down & intersect of predecessors' doms

Immediate Dominator
Dominator Tree

Post Dominator
-> blocks that are guaranteed to excutue AFTER this block + ITSELF

Post Dominator Analysis: bottom-up & intersect of successors' p-doms

---------------------------------------------------------------

Natural Loops
- LoopBB: BBs that comprise the loop
- header: dominates all LoopBB
- backedge: edge[x->y] where y dominates x
- preheader: new block before the header (all others are retargeted to preheader)
Loop Detection
- each backedge defines a loop
- merge loops with the same header

Nesting
- nesting depth
	- outer loop: 1
	- inner loop: depth(parent loop) + 1
Trip Count
- how many times does the loop iterate, on average
- avg trip count = weight(header) / weight(preheader)

Reducible Flow Graphs

---------------------------------------------------------------

Regions
- basic blocks are too small
- intermediate sized regions with simple control flow!

Trace
- linear collection of basic blocks that tend to execute in sequence
	- side entrace
	- side exit
- longer traces aren't always better
	- longer trace -> on-trace may reduce
	- on-trace/off-trace trade-off is heuristic dependent
- algorithm
	- beware: cumulative probability is ignored when applying threshold

Superblock
- linear collection of basic blocks that tend to execute in sequence (TRACE)
  ... in which control flow may only enter at the first BB (= NO SIDE ENTRANCE)
- algorithm
	- trace selection
	- eliminate side entrance
		- tail duplication -> redirect -> adjust weights
- when to apply
	- set upper limit on code expansion: 1.0-1.1x
	- tradeoff: code-size increase / side entrace elimination

<predicates>
- pro/con
	- pro
		- no branches, no mispredicts
		- can freely reorder independent operations in the predicated block
		- overlap BB2 with BB5 and BB6
	- costs
		- worst case schedule length
		- worst case resources required
- CMPP
	- 2 targets for computing taken/fall-through conditions with 1 operation
- Control Dependence
	- name edges
	- traverse immediate post dominators and add the edge
- If conversion
	- loop backedge coalescing
	- control dependence anlysis
	- control flow substitution
		- create predicates: 1 predicate per 1 CD set, CMPP OR-type
		- CMPP insertion: at the edges in CD set!
		- Guard operations (insert predicates)
		- remove branches (insert predicates)
		- initialize predicates: initialize to 0 in the first BB
	- CMPP compaction: OR to UN types, remove init for UN
	
	- pro
		- larger basic blocks
		- convert control dependencies to data dependencies
	- con
		- resource usage
		- dependence height
		- hazard presence

Hyperblock (CMPP, Control-dependence, If-conversion)
- block selection
- tail duplication
- if conversion

---------------------------------------------------------------

2. Data Flow Analysis and Optimization

Data Flow Analysis

1. Liveness
- GEN/KILL
	- start from the last op in block, bottom up
	- dest: +KILL -GEN
	- src:  +GEN  -KILL
- IN/OUT
	- init IN to 0
	- OUT: UNION(successors' IN)
	- IN: GEN + OUT - KILL
	
2. Reaching Def
- GEN/KILL
	- start from the first op in block, top down
	- G: op
	- K: all ops defining dest - op
	- GEN = G + GEN - K
	- KILL = K + KILL - G
	
<the rest is too cumbersome, just memorize the quadraplane...>

---------------------------------------------------------------

Classic Optimizations

1. dead code elimination
remove any operation who's result is never consumed
start from the last(bottom) critical operation, and follow UD chain

2. local constant propagation
inside a block, forward propagate r{X} = C (C is a constant or a literal)

3. global constant propagation
between blocks, forward propaget...

4. constant folding
evaluate the op, and
(1) replace the op
(2) remove a branch or a conditional

5. forward copy propagation
forward propagate RHS of moves (e.g. r1 = r2)

6. CSE
eliminate recomputation of an expression by reusing the previous result
expr(X) must be available at point Y!

7. LICM
Loop invariant code motion
move operations whose source operands do not change within the loop to the loop preheader

8. Global variable migration
- assign a global variable temporarily to a register for the duration of the loop
- only for load / store
	- load: preheader
	- store: exit point

9. Induction Variable Strength Reduction
- create basic induction variable from dervied induction variables
- BIV: e.g. x = x + 1 (has itself)
- DIV: e.g. y = x + C (y = BIV {* << + -} C)
- steps (x: src BIV, y: DIV)
	- insert new_reg = RHS(X) in preheader
	- insert new_inc = increment in bottom of preheader
	- insert new_reg += new_inc after update of x
	- change y = new_reg

ILP Optimizations
Instruction level parallelism optimizations

increase the amount of parallelism to overlap operations
(trade-off: parallelism / extra instructions)

1. Back-substitution
basically, expand operations
e.g. r13 = r1 + r2 + r3 -r4 + r5 -r6

2. tree height reduction
recompute the expanded operation in a balanced binary tree -> maximize parallelism

3. Optimizing unrolled loops
- Register Renaming
- Accumulator (x = x + y, y is VARIANT)
	-> initialize to 0
	-> sum up AFTER loop
- Induction var (x = x + y, y in INVARIANT)
	-> initialize to counter value
* make sure to update operands as well

---------------------------------------------------------------

3. Code Generation

Virtual -> physical binding
1. Scheduling
2. Register allocation (not for exam)

Data Dependences
- RAW (true dep) : flow
- WAW (false dep) : output
- WAR (false dep) : anti
- RAR (No dep)

Estart: earliest start time (MAX(Estart(pred) + latency)
Lstart: latest start time (MIN(Lstart(succ) - latency)
Slack: measure of scheduling freedom (0 is critical, Lstart - Estart)

Operation priority
- height: distance from exit node == higher priority (MaxLstart - Lstart + 1)
- slack: 0 slack == higher priority

List Scheduling
1. find READY
2. if schedulable -> (1) mark RSRC busy (2) move from READY to PLACED
3. else continue

